#!/usr/bin/env ruby

# Copyright, 2012, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'collada/parser/library'

require 'collada/conversion/mesh'
require 'collada/conversion/skeleton'

require 'rainbow'
require 'benchmark'
require 'trollop'

class TaggedFormat
	VERTEX_FORMATS = {
		"p3n3" => Collada::Conversion::VertexFormat[position: [:X, :Y, :Z], normal: [:X, :Y, :Z]],
		"p3n3m2" => Collada::Conversion::VertexFormat[position: [:X, :Y, :Z], normal: [:X, :Y, :Z], texcoord: [:S, :T]],
	}
	
	WEIGHT_FORMATS = {
		"b2w2" => Collada::Conversion::WeightFormat[2],
		"b4w4" => Collada::Conversion::WeightFormat[4]
	}
	
	def initialize(options, library, output = nil)
		@options = options
		@library = library
		
		@output = output || $stdout
		
		@top = {}
		@nodes = {}
	end
	
	def dump_geometry(scene, node, instance)
		vertex_format = VERTEX_FORMATS[@options[:vertex_format]]
		geometry = instance.lookup(@library)
		
		@output.puts "#{geometry.id}: mesh triangles"
		@output.puts "	vertices: array #{@options[:vertex_format]}"
		geometry.mesh.vertices.size.times do |index|
			vertex = geometry.mesh.polygons.vertex(index)
			@output.puts "		#{vertex_format.extract(vertex).to_a.collect{|v| v.to_s.rjust(12)}.join(' ')}"
		end
		@output.puts "	end"
		@output.puts "	indices: array u2"
		geometry.mesh.polygons.each_slice(3) do |indices|
			@output.puts "		#{indices.flatten.collect{|i| i.to_s.rjust(5)}.join}"
		end
		@output.puts "	end"
		@output.puts "end"
		
		@top[geometry.name || geometry.id] = geometry.id
		
		return geometry
	end
	
	def dump_controller(scene, node, instance)
		weight_format = WEIGHT_FORMATS[@options[:weight_format]]
		
		controller = instance.lookup(@library)
		if controller.bind_pose_transform != Matrix.identity(4)
			raise ArgumentError.new("Non-identity bind pose transform is not supported by this exporter!")
		end
		
		top_joint = scene[instance.skeleton.id]
		
		geometry = dump_geometry(scene, node, controller.source)
		
		skeleton = Collada::Conversion::Skeleton.new(@library, scene, top_joint, controller)
		
		indexed_weights = skeleton.indexed_weights
		
		@output.puts "#{controller.id}: skeleton"
		@output.puts "	weights: array #{@options[:weight_format]}"
		geometry.mesh.vertices.size.times do |index|
			bones, weights = weight_format.extract(indexed_weights[index])
			@output.puts "		#{bones.collect{|b|b.to_s.rjust(5)}.join} #{weights.collect{|w|w.to_s.rjust(12)}.join(' ')}"
		end
		@output.puts "	end"
		
		indexed_bones = {}
		@output.puts "	bones: array bone"
		skeleton.bones.each.with_index do |(parent, bone), index|
			indexed_bones[bone.id] = index
			@output.puts "		#{bone.id} #{parent.to_s.rjust(5)}\t#{bone.transform_matrix.to_a.flatten.join(' ')}"
		end
		@output.puts "	end"
		
		# Extract out the animations that transform the bones:
		channels = {}
		@library[:animations].each do |animation|
			animation.channels.each do |channel|
				channels[channel.target] = channel
			end
		end
		
		@output.puts "	sequences: offset-table"
		@output.puts "		default: animation 0.0 1.0"
		@output.puts "			key-frames: array bone-key-frame"
		skeleton.bones.each do |(parent, bone)|
			channel = channels["#{bone.id}/transform"]
			
			raise ArgumentError.new("Bone #{bone.id} doesn't have an associated animation channel!") unless channel
			
			channel.source.count.times do |index|
				attributes = Collada::Parser::Attribute.merge(channel.source[index])
				@output.puts "				" + [indexed_bones[bone.id], attributes[:INTERPOLATION].downcase, attributes[:TIME], attributes[:TRANSFORM].to_a].flatten.join(' ')
			end
		end
		@output.puts "			end"
		@output.puts "		end"
		@output.puts "	end"
		
		@output.puts "end"
		
		@top[controller.name || controller.id] = controller.id
		
		return geometry, skeleton
	end
	
	def dump_instances(instances, indent = "")
	end
	
	def dump_nodes(nodes, indent = "")
		nodes.each do |node|
			next unless node.type == :node
			
			@output.puts indent + "node #{node.id}"
			@output.puts indent + "	#{node.local_transform_matrix.to_a.flatten.join(' ')}"
			
			dump_instances(node.instances, indent + "\t")
			dump_nodes(node.children, indent + "\t")
			
			@output.puts indent + "end"
		end
	end
	
	def dump
		@nodes = {}
		
		@library[:visual_scenes].each do |scene|
			scene.traverse do |node|
				$stderr.puts node.inspect.color(:blue)
				
				node.instances.each do |instance|
					case instance
					when Collada::Parser::VisualScene::GeometryInstance
						geometry = dump_geometry(scene, node, instance)
					when Collada::Parser::VisualScene::ControllerInstance
						geometry, skeleton = dump_controller(scene, node, instance)
					end
				end
			end
			
			if @options[:nodes]
				dump_nodes(scene.nodes)
			end
		end
		
		@output.puts "top: offset-table"
		@top.each do |name, label|
			@output.puts "	#{name}: $#{label}"
		end
		@output.puts "end"
	end
end

module Application
	def self.tagged_format
		options = Trollop::options do
			opt :vertex_format, "Vertices format, one of #{TaggedFormat::VERTEX_FORMATS.keys.join(', ')}.", :default => "p3n3"
			opt :weight_format, "Bone weight format, one of #{TaggedFormat::WEIGHT_FORMATS.keys.join(', ')}.", :default => "b4w4"
			
			opt :nodes, "Dump scene graph data structure", :default => false
		end
		
		doc = REXML::Document.new(ARGF)
		library = Collada::Parser::Library.parse(doc)
		
		TaggedFormat.new(options, library).dump
	end
end

time = Benchmark.measure do
	action = ARGV.shift.gsub(/-/, '_').to_sym
	Application.send(action) if Application.methods.include?(action)
end

$stderr.puts time.format("Elapsed Time: %r").color(:magenta)
