#!/usr/bin/env ruby

# Copyright, 2012, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'collada/parser/library'

require 'collada/conversion/mesh'
require 'collada/conversion/skeleton'

require 'rainbow'
require 'benchmark'
require 'trollop'

module Application
	VERTEX_FORMATS = {
		"p3n3" => Collada::Conversion::VertexFormat[position: [:X, :Y, :Z], normal: [:X, :Y, :Z]],
		"p3n3i" => Collada::Conversion::VertexFormat[position: [:X, :Y, :Z], normal: [:X, :Y, :Z], vertex: [:index]],
		"p3n3m2" => Collada::Conversion::VertexFormat[position: [:X, :Y, :Z], normal: [:X, :Y, :Z], texcoord: [:S, :T]],
		"p3n3m2i" => Collada::Conversion::VertexFormat[position: [:X, :Y, :Z], normal: [:X, :Y, :Z], texcoord: [:S, :T], vertex: [:index]],
	}
	
	WEIGHT_FORMATS = {
		"b2w2" => Collada::Conversion::WeightFormat[2],
		"b4w4" => Collada::Conversion::WeightFormat[4]
	}
	
	def self.dump_geometry(options, library, scene, node, instance)
		geometry = instance.lookup(library)
		vertex_format = options[:vertex_format]
		
		mesh = Collada::Conversion::Mesh.new
		
		geometry.mesh.polygons.each do |polygon|
			#raise ArgumentError.new("Non-triangle polygons are not supported!") if polygon.size != 3
			
			polygon.each do |vertex|
				mesh << Collada::Conversion::Vertex.new(vertex, VERTEX_FORMATS[vertex_format])
			end
		end
		
		puts "#{node.id}: mesh triangles"
		puts "	indices: array u2"
		mesh.indices.each_slice(16) do |slice|
			puts "		#{slice.collect{|i| i.to_s.rjust(5)}.join}"
		end
		puts "	end"
		puts "	vertices: array #{vertex_format}"
		mesh.size.times do |index|
			puts "		#{mesh.indexed[index].to_a.collect{|v| v.to_s.rjust(12)}.join(' ')}"
		end
		puts "	end"
		puts "end"
		
		return geometry, mesh
	end
	
	def self.dump_controller(options, library, scene, node, instance)
		controller = instance.lookup(library)
		top_joint = scene[instance.skeleton.id]
		
		geometry, mesh = dump_geometry(options, library, scene, node, controller.source)
		
		skeleton = Collada::Conversion::Skeleton.new(library, scene, top_joint, controller)
		
		puts "*** Bones ***", skeleton.bones.inspect
		
		# Extract out the animations that transform the bones:
		channels = {}
		library[:animations].each do |animation|
			animation.channels.each do |channel|
				channels[channel.target] = channel
			end
		end
		
		keyframes = []
		skeleton.bones.each do |(parent, bone)|
			channel = channels["#{bone.id}/transform"]
			
			channel.source.count.times do |index|
				attributes = Collada::Parser::Attribute.merge(channel.source[index])
				puts [bone.id, index, attributes].inspect
			end
		end
	end
	
	def self.dump
		options = Trollop::options do
			opt :vertex_format, "Vertices format, one of #{VERTEX_FORMATS.keys.join(', ')}.", :default => "p3n3"
			opt :weight_format, "Bone weight format, one of #{WEIGHT_FORMATS.keys.join(', ')}.", :default => nil
		end
		
		doc = REXML::Document.new(ARGF)
		library = Collada::Parser::Library.parse(doc)
		
		# output_format = VertexFormat.new [[:position, [:X, :Y, :Z]], [:normal, [:X, :Y, :Z]], [:texcoord, [:S, :T]]]
		vertex_format = VERTEX_FORMATS[options[:vertex_format]]
		
		library[:visual_scenes].each do |scene|
			scene.traverse do |node|
				$stderr.puts node.inspect.color(:blue)
				
				node.instances.each do |instance|
					case instance
					when Collada::Parser::VisualScene::GeometryInstance
						dump_geometry(options, library, scene, node, instance)
					when Collada::Parser::VisualScene::ControllerInstance
						dump_controller(options, library, scene, node, instance)
					end
				end
			end
		end
	end
end

time = Benchmark.measure do
	action = ARGV.shift.to_sym
	Application.send(action) if Application.methods.include?(action)
end

$stderr.puts time.format("Elapsed Time: %r").color(:magenta)
